{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/components/divider.js","webpack:///./src/components/header.js","webpack:///./src/util/styling.js"],"names":["data","get_project_html","value","key","node","name","className","fluid","image","childImageSharp","to","tag","title","condense","subtitle","ongoing_projects","allTseProjects","edges","filter","ongoing","map","completed_projects","buttons","href","background","textColor","lineColor","gridify","id","Divider","caption","Header","gradient","text","length","substring","nbsp","repeat","elements","num_columns","rows","i","push","slice"],"mappings":"8FAAA,2JAkBe,sBAER,IADLA,EACI,EADJA,KAEMC,EAAmB,SAACC,GACxB,OACE,yBAAKC,IAAG,GAAKD,EAAME,KAAKC,MACtB,yBAAKC,UAAU,cACb,kBAAC,IAAD,CAAKC,MAAOL,EAAME,KAAKI,MAAMC,gBAAgBF,MAAOD,UAAU,sBAC9D,yBAAKA,UAAU,4BACb,kBAAC,OAAD,CAAMI,GAAE,YAAcR,EAAME,KAAKO,IAAOL,UAAU,kCAAiC,uBAAGA,UAAU,yBAAyBJ,EAAME,KAAKQ,SAEtI,uBAAGN,UAAU,6BAA6BO,YAASX,EAAME,KAAKU,SAAU,SAO1EC,EAAmBf,EAAKgB,eAAeC,MAC1CC,QAAO,SAAChB,GACP,OAAOA,EAAME,KAAKe,WAEnBC,KAAI,SAAClB,GACJ,OAAOD,EAAiBC,MAEtBmB,EAAqBrB,EAAKgB,eAAeC,MAC5CC,QAAO,SAAChB,GACP,OAAQA,EAAME,KAAKe,WAEpBC,KAAI,SAAClB,GACJ,OAAOD,EAAiBC,MAG5B,OAAQ,6BACN,kBAAC,IAAD,CAAKU,MAAM,aACX,kBAAC,IAAD,CACEA,MACE,8CAEFE,SAAS,6HACTQ,QACE,8BACE,uBAAGhB,UAAU,4DAA4DiB,KAAK,+BAA9E,mBAEE,uBAAGjB,UAAU,wBAAb,UAINkB,WAAW,qBAEb,yBAAKlB,UAAU,aACb,kBAAC,IAAD,CAASM,MAAM,wBAAwBE,SAAS,mBAAmBW,UAAU,YAAYC,UAAU,iCAClGC,YAAQZ,EAAkB,IAE7B,yBAAKT,UAAU,YAAYsB,GAAG,gBAC5B,kBAAC,IAAD,CAAShB,MAAM,qBAAqBE,SAAS,gBAAgBW,UAAU,YAAYC,UAAU,iCAC5FC,YAAQN,EAAoB,IAE/B,kBAAC,IAAD,S,oFC5EJ,uDAoBeQ,IAfC,SAAC,GAAD,IACdjB,EADc,EACdA,MACAE,EAFc,EAEdA,SACAW,EAHc,EAGdA,UACAC,EAJc,EAIdA,UACAI,EALc,EAKdA,QALc,OAOd,yBAAKxB,UAAU,sBACb,uBAAGA,UAAS,GAAKmB,GAAcX,GAC/B,wBAAIR,UAAS,GAAKmB,GAAcb,GAChC,wBAAIN,UAAS,qBAAsBoB,GAAwB,4BAC3D,uBAAGpB,UAAS,uBAAyBmB,GAAcK,M,kCChBvD,yDAiCeC,IA5BA,SAAC,GAAD,EACb/B,KADa,IAEbY,EAFa,EAEbA,MACAE,EAHa,EAGbA,SACAQ,EAJa,EAIbA,QACAE,EALa,EAKbA,WALa,OAOb,6BACE,kBAAC,IAAD,CAAQQ,UAAU,IAClB,yBAAK1B,UAAS,eAAgBkB,GAA0B,wBACtD,yBAAKlB,UAAU,aACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,oBAAoBM,IAEpC,yBAAKN,UAAU,WACb,4BAAKQ,IAEP,yBAAKR,UAAU,8BACZgB,IAGL,iC,oCC3BR,6FAEA,SAAST,EAASoB,EAAMC,GACtB,GAAID,EAAKC,OAASA,EAAS,EAEzB,OAAOD,EAAKE,UAAU,EAAGD,GAAU,MAC9B,GAAID,EAAKC,OAASA,EAAQ,CAI/B,IAAIE,EAAO,IAAOC,OAAO,GAEzB,OAAOJ,GAAO,IAAIG,GAAOC,QAAQH,EAASD,EAAKC,QAAUE,EAAKF,OAD7C,KAGjB,OAAOD,EAIX,SAASN,EAAQW,EAAUC,GAEzB,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAIH,EAASJ,OAAQO,GAAKF,EACxCC,EAAKE,KACH,yBAAKpC,UAAU,OACZgC,EAASK,MAAMF,EAAGA,EAAIF,KAI7B,OAAOC","file":"component---src-pages-projects-js-bf6c0bf276083b19febe.js","sourcesContent":["import React from 'react'\nimport {\n  Link,\n  graphql\n} from 'gatsby'\nimport Img from 'gatsby-image'\nimport SEO from '../components/seo.js'\nimport Header from '../components/header.js'\nimport Divider from '../components/divider.js'\nimport Footer from '../components/footer.js'\nimport {\n  condense,\n  gridify\n} from '../util/styling.js'\nimport '../styles/pages.css'\nimport '../styles/colors.css'\nimport '../../node_modules/materialize-css/dist/css/materialize.min.css'\n\nexport default ({\n  data\n}) => {\n  const get_project_html = (value) => {\n    return (\n      <div key={`${value.node.name}`}>\n        <div className=\"col l4 s12\">\n          <Img fluid={value.node.image.childImageSharp.fluid} className=\"tse-project-image\"></Img>\n          <div className=\"tse-project-title center\">\n            <Link to={`/project/${value.node.tag}`} className=\"link-text-color tse-text-large\"><b className=\"tse-project-link-blue\">{value.node.title}</b></Link>\n          </div>\n          <p className=\"tse-text-medium navy-text\">{condense(value.node.subtitle, 250)}</p>\n        </div>\n      </div>\n    )\n  };\n  // Project information is stored in data.allTseProjects\n  // This is fetched using a GraphQL query that maps to the tritonse-source-firestore plugin\n  const ongoing_projects = data.allTseProjects.edges\n    .filter((value) => {\n      return value.node.ongoing\n    })\n    .map((value) => {\n      return get_project_html(value);\n    });\n  const completed_projects = data.allTseProjects.edges\n    .filter((value) => {\n      return !value.node.ongoing\n    })\n    .map((value) => {\n      return get_project_html(value);\n    });\n\n  return (<div>\n    <SEO title=\"Projects\"/>\n    <Header\n      title={\n        <span>Our Projects</span>\n      }\n      subtitle=\"At Triton Software Engineering, we believe in keeping our work open source because we value transparency and connectivity.\"\n      buttons={\n        <span>\n          <a className=\"waves-effect waves-light btn-large navy tse-header-button\" href=\"https://github.com/tritonse\">\n            Visit Our GitHub\n            <i className=\"material-icons right\">code</i>\n          </a>\n        </span>\n      }\n      background='tse-header-hands'\n    />\n    <div className=\"container\">\n      <Divider title=\"What We've Been Up To\" subtitle=\"CURRENT PROJECTS\" textColor=\"navy-text\" lineColor=\"tse-divider-line-dark-yellow\"/>\n      {gridify(ongoing_projects, 3)}\n    </div>\n    <div className=\"container\" id=\"pastprojects\">\n      <Divider title=\"What We Were Up To\" subtitle=\"PAST PROJECTS\" textColor=\"navy-text\" lineColor=\"tse-divider-line-dark-yellow\"/>\n      {gridify(completed_projects, 3)}\n    </div>\n    <Footer/>\n  </div>)\n}\n\nexport const query = graphql `\n  query {\n    allTseProjects {\n      edges {\n        node {\n          tag\n          title\n          subtitle\n          ongoing\n          image {\n            ...FluidImage\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport '../styles/divider.css'\nimport '../styles/colors.css'\nimport '../../node_modules/materialize-css/dist/css/materialize.min.css'\n\nconst Divider = ({\n  title,\n  subtitle,\n  textColor,\n  lineColor,\n  caption,\n}) => (\n  <div className=\"center tse-divider\">\n    <p className={`${textColor}`}>{subtitle}</p>\n    <h3 className={`${textColor}`}>{title}</h3>\n    <hr className={`tse-divider-line ${lineColor ? lineColor : 'tse-divider-line-amber'}`}/>\n    <p className={`tse-divider-caption ${textColor}`}>{caption}</p>\n  </div>\n)\n\nexport default Divider;\n","import React from 'react'\nimport Navbar from '../components/navbar.js'\nimport '../styles/header.css'\nimport '../../node_modules/materialize-css/dist/css/materialize.min.css'\n\nconst Header = ({\n  data,\n  title,\n  subtitle,\n  buttons,\n  background\n}) => (\n  <div>\n    <Navbar gradient={true}/>\n    <div className={`tse-header ${background ? background : 'tse-header-gradient'}`}>\n      <div className=\"container\">\n        <div className=\"row center white-text\">\n          <div className=\"col s12\">\n            <h1 className=\"tse-header-title\">{title}</h1>\n          </div>\n          <div className=\"col s12\">\n            <h5>{subtitle}</h5>\n          </div>\n          <div className=\"col s12 tse-header-buttons\">\n            {buttons}\n          </div>\n        </div>\n        <p></p>\n      </div>\n    </div>\n  </div>\n)\n\nexport default Header;\n","import React from 'react'\n\nfunction condense(text, length) {\n  if (text.length > length - 3) {\n    // If the string is too long, trim it and add ellipses at the end\n    return text.substring(0, length) + '...';\n  } else if (text.length < length) {\n    // HACKY: If the length of the text is too short, we pad it with invisible non-breaking spaces\n    // These spaces ensure that the card is padded vertically to the correct size\n    // Chances are descriptions are long enough but this is a fallback measure to keep card heights identical \n    let nbsp = \"\\xa0\".repeat(4);\n    let nbsp_scale = 1.7;\n    return text + ` ${nbsp}`.repeat((length - text.length) / nbsp.length * nbsp_scale);\n  } else {\n    return text;\n  }\n}\n\nfunction gridify(elements, num_columns) {\n  let rows = [];\n  for (let i = 0; i < elements.length; i += num_columns) {\n    rows.push(\n      <div className=\"row\">\n        {elements.slice(i, i + num_columns)}\n      </div>\n    );\n  }\n  return rows;\n}\n\nexport {\n  condense,\n  gridify\n};\n"],"sourceRoot":""}