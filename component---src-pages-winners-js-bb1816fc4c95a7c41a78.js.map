{"version":3,"sources":["webpack:///./src/images/logo-yellow.png","webpack:///./src/components/matrix.js","webpack:///./src/components/winners.js","webpack:///./src/pages/winners.js"],"names":["module","exports","Matrix","componentDidMount","initWowJS","c","this","refs","canvas","ctx","getContext","width","height","phrase","split","columns","drops","x","draw","fillStyle","fillRect","font","font_size","i","length","text","Math","floor","random","fillText","setInterval","render","className","ref","data-wow-duration","data-wow-delay","src","require","alt","React","Component","Winners","props","activity","winners","map","row","winner","index","columnSize","isRight","fluid","image","childImageSharp","name","position","data","events","allTseWinners","edges","forEach","edge","event","node","target","allTseMembers","find","anonTseMember","grid","push","slice","sort","a","b","ordering","key","id"],"mappings":"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","file":"component---src-pages-winners-js-bb1816fc4c95a7c41a78.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/logo-yellow-dde97d39c0fe52f4ca4ca9b20f6e30a4.png\";","import React from 'react'\nimport { initWowJS } from '../util/init.js'\n\nclass Matrix extends React.Component {\n    componentDidMount() {\n      initWowJS();\n\n      const c = this.refs.canvas;\n      const ctx = c.getContext(\"2d\");\n\n      //making the canvas full screen\n      c.width = 1600;\n      c.height= 1000;\n\n      // characters - taken from the unicode charset\n      let phrase = \"TritonSoftwareEngineering\";\n\n      //converting the string into an array of single characters\n      phrase = phrase.split(\"\");\n\n      const font_size = 12;\n      const columns = c.width / font_size; //number of columns for the rain\n\n      //an array of drops - one per column\n      const drops = [];\n\n      //x below is the x coordinate\n      //1 = y co-ordinate of the drop(same for every drop initially)\n      for (let x = 0; x < columns; x++)\n          drops[x] = 1;\n      //drawing the characters\n      function draw() {\n          //Black BG for the canvas\n          //translucent BG to show trail\n          ctx.fillStyle = \"rgba(0, 0, 0, 0.05)\";\n          ctx.fillRect(0, 0, c.width, c.height);\n\n          ctx.fillStyle = \"#34ace0\"; //green text #24d8e5\n          ctx.font = font_size + \"px arial\";\n          //looping over drops\n          for (let i = 0; i < drops.length; i++) {\n              //a random character to print\n              const text = phrase[Math.floor(Math.random() * phrase.length)];\n              //x = i*font_size, y = value of drops[i]*font_size\n              ctx.fillText(text, i * font_size, drops[i] * font_size);\n\n              //sending the drop back to the top randomly after it has crossed the screen\n              //adding a randomness to the reset to make the drops scattered on the Y axis\n              if (drops[i] * font_size > c.height && Math.random() > 0.975)\n                  drops[i] = 0;\n\n              //incrementing Y coordinate\n              drops[i]++;\n          }\n      }\n      (function () {\n          setInterval(draw, 15);\n      })();\n    }\n\n    render() {\n        return (\n            <section className=\"header\">\n                <canvas ref=\"canvas\"/>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <div className=\"img-container center-align wow bounceInDown\" data-wow-duration=\".6s\"\n                                 data-wow-delay=\"0s\">\n                                <img src={require('../images/logo-yellow.png')} className=\"circle responsive-img\" alt=\"TSE\" />\n                            </div>\n                            <div className=\"head-title wow fadeIn\" data-wow-duration=\".6s\"\n                                 data-wow-delay=\"0s\">\n                                <h3 className=\"center-align\"> TSE Hall of Fame</h3>\n                            </div>\n                            <div className=\"head-content wow fadeIn\" data-wow-duration=\".6s\"\n                                 data-wow-delay=\"0s\">\n                                <h5 className=\"center-align\"> Since the 2019-2020 school year, TSE holds an annual tournament between project\n                                    teams. Winners are immortalized forever on this page.\n                                </h5>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\nexport default Matrix;\n","import React from 'react'\nimport Img from 'gatsby-image'\nimport { initWowJS } from '../util/init.js'\n\nclass Winners extends React.Component {\n    componentDidMount() {\n      initWowJS();\n    }\n\n    render() {\n        return (\n            <section className=\"services\">\n                <div className=\"container\">\n                    <h4 className=\"service-des center-align wow bounceInRight\" data-wow-duration=\".6s\" data-wow-delay=\"0.4s\">\n                        {this.props.activity}\n                    </h4>\n                    {this.props.winners.map(row => {\n                        return(<div className=\"row\">\n                            {row.map((winner, index) => {\n                                const columnSize = 12/row.length;\n                                const isRight = index>=row.length/2;\n                                return(<div className={`col s12 m3 l${columnSize} wow ${isRight ?\n                                    'fadeInRight' : 'fadeInLeft'}`} data-wow-duration=\".6s\" data-wow-delay=\"0.4s\">\n                                    <div className=\"card wow rollIn\">\n                                        <div className=\"card-image service-img\">\n                                          <Img fluid={winner.image.childImageSharp.fluid} className=\"tse-profile-image\"></Img>\n                                        </div>\n                                        <div className=\"card-block\">\n                                            <h5 className=\"service-des center-align\">{winner.name}</h5>\n                                            <div className=\"service-divider\"></div>\n                                            <p className=\"service-extra center-align\">{winner.position}</p>\n                                        </div>\n                                    </div>\n                                </div>);\n                            })}\n                        </div>)\n                    })}\n                </div>\n            </section>\n        );\n    }\n}\nexport default Winners;\n","import { graphql } from 'gatsby'\nimport React from 'react'\nimport '../styles/winners.css'\nimport '../styles/animated/animated.min.css';\n\nimport Matrix from \"../components/matrix\";\nimport Winners from \"../components/winners\";\nimport Footer from '../components/footer.js'\n\nexport default ({\n    data\n}) => {\n  const events = [];\n  data.allTseWinners.edges.forEach(edge => {\n    const event = edge.node;\n    // Attaches a Gatsby image node to each winner if their\n    // information appears in the members section. Only works for current \n    // members at the moment. New members and alumni appear as anonymous.\n    event.winners.forEach(winner => {\n      let target = data.allTseMembers.edges.find((edge) => {\n        return edge.node.name === winner.name;\n      });\n      if (target == null) {\n        winner.image = data.anonTseMember;\n      } \n      else {\n        winner.image = target.node.image;\n      }\n    });\n    // The matrix class takes in a 2D grid of winners, so this class breaks\n    // up a list of winners into groups of 4.\n    const winners = event.winners;\n    const grid = []; \n    for (let i = 0; i < winners.length; i += 4) {\n      grid.push(winners.slice(i, i + 4))\n    }\n    event.winners = grid;\n    events.push(event);\n  });\n  events.sort((a, b) => (b.ordering - a.ordering));\n  return (\n    <div className='body'>\n      <Matrix/>\n      {\n        events.map((event) => {\n          return <Winners key={event.id} winners={event.winners} activity={event.activity}/>\n        })\n      }\n    </div>\n  );\n}\n\nexport const query = graphql `\n  query {\n    allTseWinners {\n      edges {\n        node {\n          activity\n          ordering \n          winners {\n            name\n            position\n          }\n        }\n      }\n    }\n    allTseMembers {\n      edges {\n        node {\n          name\n          image {\n            ...FluidImage\n          }\n        }\n      }\n    }\n    anonTseMember: file(relativePath: { eq: \"members/Anonymous.png\" }) {\n      ...FluidImage\n    }\n  }\n`\n"],"sourceRoot":""}