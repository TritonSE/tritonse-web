{"version":3,"sources":["webpack:///./src/components/divider.js","webpack:///./src/templates/project.js","webpack:///./src/util/styling.js"],"names":["Divider","title","subtitle","textColor","lineColor","caption","className","project","data","tseProjects","jumbo_left","condense","class","href","github","jumbo_right","fluid","image","childImageSharp","gradient","dangerouslySetInnerHTML","__html","overview","text","length","substring","nbsp","repeat","gridify","elements","num_columns","rows","i","push","slice"],"mappings":"8IAAA,uDAkBeA,IAbC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,UAAWC,EAA1C,EAA0CA,QAA1C,OACd,yBAAKC,UAAU,sBACb,uBAAGA,UAAS,GAAKH,GAAcD,GAC/B,wBAAII,UAAS,GAAKH,GAAcF,GAChC,wBACEK,UAAS,qBACPF,GAAwB,4BAG5B,uBAAGE,UAAS,uBAAyBH,GAAcE,M,kCCdvD,+IAYe,sBAAe,IACxBE,EADuB,EAAXC,KACGC,YACfC,EACF,yBAAKJ,UAAU,cACb,wBAAIA,UAAU,cAAcC,EAAQN,OACpC,wBAAIK,UAAU,cAAcK,YAASJ,EAAQL,SAAU,MACvD,yBAAKU,MAAM,iCACT,uBACEN,UAAU,0CACVO,KAAMN,EAAQO,QAFhB,mBAKE,uBAAGR,UAAU,wBAAb,WAKJS,EACF,yBAAKT,UAAU,cACb,kBAAC,IAAD,CACEU,MAAOT,EAAQU,MAAMC,gBAAgBF,MACrCV,UAAU,oDAIhB,OACE,6BACE,kBAAC,IAAD,CAAKL,MAAOM,EAAQN,QACpB,kBAAC,IAAD,CAAQkB,UAAU,IAClB,yBAAKb,UAAU,0CACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,2CACZI,EACAK,GAEH,yBAAKT,UAAU,0BACZI,EACAK,KAIP,yBAAKH,MAAM,aACT,kBAAC,IAAD,CACEX,MAAM,6BACNC,SAAS,WACTC,UAAU,YACVC,UAAU,iCAEZ,uBACEE,UAAU,4BACVc,wBAAyB,CAAEC,OAAQd,EAAQe,aAG/C,kBAAC,IAAD,S,oCCjEN,6FAEA,SAASX,EAASY,EAAMC,GACtB,GAAID,EAAKC,OAASA,EAAS,EAEzB,OAAOD,EAAKE,UAAU,EAAGD,GAAU,MAC9B,GAAID,EAAKC,OAASA,EAAQ,CAI/B,IAAIE,EAAO,IAAOC,OAAO,GAEzB,OACEJ,GACA,IAAIG,GAAOC,QAASH,EAASD,EAAKC,QAAUE,EAAKF,OAHlC,KAMjB,OAAOD,EAIX,SAASK,EAAQC,EAAUC,GAEzB,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAIH,EAASL,OAAQQ,GAAKF,EACxCC,EAAKE,KAAK,yBAAK3B,UAAU,OAAOuB,EAASK,MAAMF,EAAGA,EAAIF,KAExD,OAAOC","file":"component---src-templates-project-js-724948fe799b0a2613bd.js","sourcesContent":["import React from \"react\";\nimport \"../styles/divider.css\";\nimport \"../styles/colors.css\";\nimport \"../../node_modules/materialize-css/dist/css/materialize.min.css\";\n\nconst Divider = ({ title, subtitle, textColor, lineColor, caption }) => (\n  <div className=\"center tse-divider\">\n    <p className={`${textColor}`}>{subtitle}</p>\n    <h3 className={`${textColor}`}>{title}</h3>\n    <hr\n      className={`tse-divider-line ${\n        lineColor ? lineColor : \"tse-divider-line-amber\"\n      }`}\n    />\n    <p className={`tse-divider-caption ${textColor}`}>{caption}</p>\n  </div>\n);\n\nexport default Divider;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport SEO from \"../components/seo.js\";\nimport Navbar from \"../components/navbar.js\";\nimport Divider from \"../components/divider.js\";\nimport Footer from \"../components/footer.js\";\nimport { condense } from \"../util/styling.js\";\nimport \"../styles/header.css\";\nimport \"../styles/pages.css\";\nimport \"../../node_modules/materialize-css/dist/css/materialize.min.css\";\n\nexport default ({ data }) => {\n  let project = data.tseProjects;\n  let jumbo_left = (\n    <div className=\"col l6 s12\">\n      <h2 className=\"white-text\">{project.title}</h2>\n      <h5 className=\"white-text\">{condense(project.subtitle, 250)}</h5>\n      <div class=\"tse-header-buttons white-text\">\n        <a\n          className=\"waves-effect waves-light btn-large navy\"\n          href={project.github}\n        >\n          Visit Our GitHub\n          <i className=\"material-icons right\">code</i>\n        </a>\n      </div>\n    </div>\n  );\n  let jumbo_right = (\n    <div className=\"col l6 s12\">\n      <Img\n        fluid={project.image.childImageSharp.fluid}\n        className=\"tse-project-template-image tse-highlight-image\"\n      ></Img>\n    </div>\n  );\n  return (\n    <div>\n      <SEO title={project.title} />\n      <Navbar gradient={true} />\n      <div className=\"tse-header-project tse-header-gradient\">\n        <div className=\"container\">\n          <div className=\"row valign-wrapper hide-on-med-and-down\">\n            {jumbo_left}\n            {jumbo_right}\n          </div>\n          <div className=\"row hide-on-large-only\">\n            {jumbo_left}\n            {jumbo_right}\n          </div>\n        </div>\n      </div>\n      <div class=\"container\">\n        <Divider\n          title=\"What's This Project About?\"\n          subtitle=\"OVERVIEW\"\n          textColor=\"navy-text\"\n          lineColor=\"tse-divider-line-dark-yellow\"\n        />\n        <p\n          className=\"tse-text-medium navy-text\"\n          dangerouslySetInnerHTML={{ __html: project.overview }}\n        />\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport const query = graphql`\n  query($id: String!) {\n    tseProjects(id: { eq: $id }) {\n      title\n      subtitle\n      overview\n      github\n      image {\n        ...FluidImage\n      }\n    }\n  }\n`;\n","import React from \"react\";\n\nfunction condense(text, length) {\n  if (text.length > length - 3) {\n    // If the string is too long, trim it and add ellipses at the end\n    return text.substring(0, length) + \"...\";\n  } else if (text.length < length) {\n    // HACKY: If the length of the text is too short, we pad it with invisible non-breaking spaces\n    // These spaces ensure that the card is padded vertically to the correct size\n    // Chances are descriptions are long enough but this is a fallback measure to keep card heights identical\n    let nbsp = \"\\xa0\".repeat(4);\n    let nbsp_scale = 1.7;\n    return (\n      text +\n      ` ${nbsp}`.repeat(((length - text.length) / nbsp.length) * nbsp_scale)\n    );\n  } else {\n    return text;\n  }\n}\n\nfunction gridify(elements, num_columns) {\n  let rows = [];\n  for (let i = 0; i < elements.length; i += num_columns) {\n    rows.push(<div className=\"row\">{elements.slice(i, i + num_columns)}</div>);\n  }\n  return rows;\n}\n\nexport { condense, gridify };\n"],"sourceRoot":""}