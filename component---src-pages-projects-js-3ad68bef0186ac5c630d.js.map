{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/components/divider.js","webpack:///./src/components/header.js","webpack:///./src/util/styling.js"],"names":["data","get_project_html","value","key","node","name","className","fluid","image","childImageSharp","to","tag","title","condense","subtitle","ongoing_projects","allTseProjects","edges","filter","ongoing","map","completed_projects","buttons","href","background","textColor","lineColor","gridify","id","Divider","caption","Header","gradient","text","length","substring","nbsp","repeat","elements","num_columns","rows","i","push","slice"],"mappings":"8FAAA,2JAYe,sBAAe,IAAZA,EAAW,EAAXA,KACVC,EAAmB,SAAAC,GACvB,OACE,yBAAKC,IAAG,GAAKD,EAAME,KAAKC,MACtB,yBAAKC,UAAU,cACb,kBAAC,IAAD,CACEC,MAAOL,EAAME,KAAKI,MAAMC,gBAAgBF,MACxCD,UAAU,sBAEZ,yBAAKA,UAAU,4BACb,kBAAC,OAAD,CACEI,GAAE,YAAcR,EAAME,KAAKO,IAC3BL,UAAU,kCAEV,uBAAGA,UAAU,yBAAyBJ,EAAME,KAAKQ,SAGrD,uBAAGN,UAAU,6BACVO,YAASX,EAAME,KAAKU,SAAU,SAQnCC,EAAmBf,EAAKgB,eAAeC,MAC1CC,QAAO,SAAAhB,GACN,OAAOA,EAAME,KAAKe,WAEnBC,KAAI,SAAAlB,GACH,OAAOD,EAAiBC,MAEtBmB,EAAqBrB,EAAKgB,eAAeC,MAC5CC,QAAO,SAAAhB,GACN,OAAQA,EAAME,KAAKe,WAEpBC,KAAI,SAAAlB,GACH,OAAOD,EAAiBC,MAG5B,OACE,6BACE,kBAAC,IAAD,CAAKU,MAAM,aACX,kBAAC,IAAD,CACEA,MAAO,8CACPE,SAAS,6HACTQ,QACE,8BACE,uBACEhB,UAAU,4DACViB,KAAK,+BAFP,mBAKE,uBAAGjB,UAAU,wBAAb,UAINkB,WAAW,qBAEb,yBAAKlB,UAAU,aACb,kBAAC,IAAD,CACEM,MAAM,wBACNE,SAAS,mBACTW,UAAU,YACVC,UAAU,iCAEXC,YAAQZ,EAAkB,IAE7B,yBAAKT,UAAU,YAAYsB,GAAG,gBAC5B,kBAAC,IAAD,CACEhB,MAAM,qBACNE,SAAS,gBACTW,UAAU,YACVC,UAAU,iCAEXC,YAAQN,EAAoB,IAE/B,kBAAC,IAAD,S,oFC1FN,uDAkBeQ,IAbC,SAAC,GAAD,IAAGjB,EAAH,EAAGA,MAAOE,EAAV,EAAUA,SAAUW,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,UAAWI,EAA1C,EAA0CA,QAA1C,OACd,yBAAKxB,UAAU,sBACb,uBAAGA,UAAS,GAAKmB,GAAcX,GAC/B,wBAAIR,UAAS,GAAKmB,GAAcb,GAChC,wBACEN,UAAS,qBACPoB,GAAwB,4BAG5B,uBAAGpB,UAAS,uBAAyBmB,GAAcK,M,kCCdvD,yDA6BeC,IAxBA,SAAC,GAAD,EAAG/B,KAAH,IAASY,EAAT,EAASA,MAAOE,EAAhB,EAAgBA,SAAUQ,EAA1B,EAA0BA,QAASE,EAAnC,EAAmCA,WAAnC,OACb,6BACE,kBAAC,IAAD,CAAQQ,UAAU,IAClB,yBACE1B,UAAS,eACPkB,GAA0B,wBAG5B,yBAAKlB,UAAU,aACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,oBAAoBM,IAEpC,yBAAKN,UAAU,WACb,4BAAKQ,IAEP,yBAAKR,UAAU,8BAA8BgB,IAE/C,iC,oCCvBR,6FAEA,SAAST,EAASoB,EAAMC,GACtB,GAAID,EAAKC,OAASA,EAAS,EAEzB,OAAOD,EAAKE,UAAU,EAAGD,GAAU,MAC9B,GAAID,EAAKC,OAASA,EAAQ,CAI/B,IAAIE,EAAO,IAAOC,OAAO,GAEzB,OACEJ,GACA,IAAIG,GAAOC,QAASH,EAASD,EAAKC,QAAUE,EAAKF,OAHlC,KAMjB,OAAOD,EAIX,SAASN,EAAQW,EAAUC,GAEzB,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAIH,EAASJ,OAAQO,GAAKF,EACxCC,EAAKE,KAAK,yBAAKpC,UAAU,OAAOgC,EAASK,MAAMF,EAAGA,EAAIF,KAExD,OAAOC","file":"component---src-pages-projects-js-3ad68bef0186ac5c630d.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport SEO from \"../components/seo.js\";\nimport Header from \"../components/header.js\";\nimport Divider from \"../components/divider.js\";\nimport Footer from \"../components/footer.js\";\nimport { condense, gridify } from \"../util/styling.js\";\nimport \"../styles/pages.css\";\nimport \"../styles/colors.css\";\nimport \"../../node_modules/materialize-css/dist/css/materialize.min.css\";\n\nexport default ({ data }) => {\n  const get_project_html = value => {\n    return (\n      <div key={`${value.node.name}`}>\n        <div className=\"col l4 s12\">\n          <Img\n            fluid={value.node.image.childImageSharp.fluid}\n            className=\"tse-project-image\"\n          ></Img>\n          <div className=\"tse-project-title center\">\n            <Link\n              to={`/project/${value.node.tag}`}\n              className=\"link-text-color tse-text-large\"\n            >\n              <b className=\"tse-project-link-blue\">{value.node.title}</b>\n            </Link>\n          </div>\n          <p className=\"tse-text-medium navy-text\">\n            {condense(value.node.subtitle, 250)}\n          </p>\n        </div>\n      </div>\n    );\n  };\n  // Project information is stored in data.allTseProjects\n  // This is fetched using a GraphQL query that maps to the tritonse-source-firestore plugin\n  const ongoing_projects = data.allTseProjects.edges\n    .filter(value => {\n      return value.node.ongoing;\n    })\n    .map(value => {\n      return get_project_html(value);\n    });\n  const completed_projects = data.allTseProjects.edges\n    .filter(value => {\n      return !value.node.ongoing;\n    })\n    .map(value => {\n      return get_project_html(value);\n    });\n\n  return (\n    <div>\n      <SEO title=\"Projects\" />\n      <Header\n        title={<span>Our Projects</span>}\n        subtitle=\"At Triton Software Engineering, we believe in keeping our work open source because we value transparency and connectivity.\"\n        buttons={\n          <span>\n            <a\n              className=\"waves-effect waves-light btn-large navy tse-header-button\"\n              href=\"https://github.com/tritonse\"\n            >\n              Visit Our GitHub\n              <i className=\"material-icons right\">code</i>\n            </a>\n          </span>\n        }\n        background=\"tse-header-hands\"\n      />\n      <div className=\"container\">\n        <Divider\n          title=\"What We've Been Up To\"\n          subtitle=\"CURRENT PROJECTS\"\n          textColor=\"navy-text\"\n          lineColor=\"tse-divider-line-dark-yellow\"\n        />\n        {gridify(ongoing_projects, 3)}\n      </div>\n      <div className=\"container\" id=\"pastprojects\">\n        <Divider\n          title=\"What We Were Up To\"\n          subtitle=\"PAST PROJECTS\"\n          textColor=\"navy-text\"\n          lineColor=\"tse-divider-line-dark-yellow\"\n        />\n        {gridify(completed_projects, 3)}\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allTseProjects {\n      edges {\n        node {\n          tag\n          title\n          subtitle\n          ongoing\n          image {\n            ...FluidImage\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport \"../styles/divider.css\";\nimport \"../styles/colors.css\";\nimport \"../../node_modules/materialize-css/dist/css/materialize.min.css\";\n\nconst Divider = ({ title, subtitle, textColor, lineColor, caption }) => (\n  <div className=\"center tse-divider\">\n    <p className={`${textColor}`}>{subtitle}</p>\n    <h3 className={`${textColor}`}>{title}</h3>\n    <hr\n      className={`tse-divider-line ${\n        lineColor ? lineColor : \"tse-divider-line-amber\"\n      }`}\n    />\n    <p className={`tse-divider-caption ${textColor}`}>{caption}</p>\n  </div>\n);\n\nexport default Divider;\n","import React from \"react\";\nimport Navbar from \"../components/navbar.js\";\nimport \"../styles/header.css\";\nimport \"../../node_modules/materialize-css/dist/css/materialize.min.css\";\n\nconst Header = ({ data, title, subtitle, buttons, background }) => (\n  <div>\n    <Navbar gradient={true} />\n    <div\n      className={`tse-header ${\n        background ? background : \"tse-header-gradient\"\n      }`}\n    >\n      <div className=\"container\">\n        <div className=\"row center white-text\">\n          <div className=\"col s12\">\n            <h1 className=\"tse-header-title\">{title}</h1>\n          </div>\n          <div className=\"col s12\">\n            <h5>{subtitle}</h5>\n          </div>\n          <div className=\"col s12 tse-header-buttons\">{buttons}</div>\n        </div>\n        <p></p>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\n\nfunction condense(text, length) {\n  if (text.length > length - 3) {\n    // If the string is too long, trim it and add ellipses at the end\n    return text.substring(0, length) + \"...\";\n  } else if (text.length < length) {\n    // HACKY: If the length of the text is too short, we pad it with invisible non-breaking spaces\n    // These spaces ensure that the card is padded vertically to the correct size\n    // Chances are descriptions are long enough but this is a fallback measure to keep card heights identical\n    let nbsp = \"\\xa0\".repeat(4);\n    let nbsp_scale = 1.7;\n    return (\n      text +\n      ` ${nbsp}`.repeat(((length - text.length) / nbsp.length) * nbsp_scale)\n    );\n  } else {\n    return text;\n  }\n}\n\nfunction gridify(elements, num_columns) {\n  let rows = [];\n  for (let i = 0; i < elements.length; i += num_columns) {\n    rows.push(<div className=\"row\">{elements.slice(i, i + num_columns)}</div>);\n  }\n  return rows;\n}\n\nexport { condense, gridify };\n"],"sourceRoot":""}