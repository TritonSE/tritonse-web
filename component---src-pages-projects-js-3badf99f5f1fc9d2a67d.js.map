{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/components/divider.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.string.repeat.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/_string-repeat.js"],"names":["gridify","elements","rows","i","length","push","className","slice","data","get_project_html","value","description","text","substring","nbsp","repeat","condense","node","key","name","fluid","local_image","childImageSharp","ongoing_projects","allTseProjects","edges","filter","ongoing","map","completed_projects","title","subtitle","buttons","href","class","background","query","Divider","textColor","lineColor","$export","P","toInteger","defined","module","exports","count","str","String","this","res","n","Infinity","RangeError"],"mappings":"yOA+BA,SAASA,EAAQC,GAGf,IAFA,IACIC,EAAO,GACFC,EAAI,EAAGA,EAAIF,EAASG,OAAQD,GAFnB,EAGhBD,EAAKG,KACH,yBAAKC,UAAU,OACZL,EAASM,MAAMJ,EAAGA,EALP,KASlB,OAAOD,EAGM,sBAAa,IAAXM,EAAU,EAAVA,KACTC,EAAmB,SAACC,GACxB,IAAIC,EAjCR,SAAkBC,EAAMR,GACtB,GAAIQ,EAAKR,OAASA,EAAS,EAEzB,OAAOQ,EAAKC,UAAU,EAAGT,GAAU,MAEhC,GAAIQ,EAAKR,OAASA,EAAQ,CAI7B,IAAIU,EAAO,IAAOC,OAAO,GAEzB,OAAOH,GAAO,IAAIE,GAAOC,QAAQX,EAASQ,EAAKR,QAAUU,EAAKV,OAD7C,KAIjB,OAAOQ,EAmBWI,CAASN,EAAMO,KAAKN,YAAa,KACnD,OACE,yBAAKO,IAAG,GAAKR,EAAMO,KAAKE,MACtB,yBAAKb,UAAU,eACb,kBAAC,IAAD,CAAKc,MAAOV,EAAMO,KAAKI,YAAYC,gBAAgBF,MAAOd,UAAU,sBACpE,2BAAG,2BAAII,EAAMO,KAAKE,OAClB,2BAAIR,MAORY,EAAmBf,EAAKgB,eAAeC,MACxCC,OAAO,SAAChB,GACP,OAAOA,EAAMO,KAAKU,UAEnBC,IAAI,SAAClB,GACJ,OAAOD,EAAiBC,KAGxBmB,EAAqBrB,EAAKgB,eAAeC,MAC1CC,OAAO,SAAChB,GACP,OAAQA,EAAMO,KAAKU,UAEpBC,IAAI,SAAClB,GACJ,OAAOD,EAAiBC,KAI5B,OAAQ,6BACN,kBAAC,IAAD,CAAKoB,MAAM,aACX,kBAAC,IAAD,CACEA,MACE,qCAAU,0BAAMxB,UAAU,cAAhB,aAEZyB,SAAS,qGACTC,QACE,8BACE,uBAAG1B,UAAU,qEAAqE2B,KAAK,+BAAvF,mBAEE,uBAAGC,MAAM,wBAAT,UAINC,WAAW,qBAEb,yBAAK7B,UAAU,aACb,kBAAC,IAAD,CAASwB,MAAM,wBAAwBC,SAAS,qBAC/C/B,EAAQuB,IAEX,yBAAKjB,UAAU,aACb,kBAAC,IAAD,CAASwB,MAAM,qBAAqBC,SAAS,kBAC5C/B,EAAQ6B,IAEX,kBAAC,IAAD,QAIG,IAAMO,EAAK,c,iCCzGlB,kCAceC,IARC,SAAC,GAAD,IAAEP,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAUO,EAAnB,EAAmBA,UAAWC,EAA9B,EAA8BA,UAA9B,OACd,yBAAKjC,UAAU,sBACb,uBAAGA,UAAS,GAAKgC,GAAcP,GAC/B,wBAAIzB,UAAS,GAAKgC,GAAcR,GAChC,wBAAIxB,UAAS,qBAAsBiC,GAAwB,+B,oBCV/D,IAAIC,EAAU,EAAQ,GAEtBA,EAAQA,EAAQC,EAAG,SAAU,CAE3B1B,OAAQ,EAAQ,Q,iCCHlB,IAAI2B,EAAY,EAAQ,IACpBC,EAAU,EAAQ,IAEtBC,EAAOC,QAAU,SAAgBC,GAC/B,IAAIC,EAAMC,OAAOL,EAAQM,OACrBC,EAAM,GACNC,EAAIT,EAAUI,GAClB,GAAIK,EAAI,GAAKA,GAAKC,IAAU,MAAMC,WAAW,2BAC7C,KAAMF,EAAI,GAAIA,KAAO,KAAOJ,GAAOA,GAAc,EAAJI,IAAOD,GAAOH,GAC3D,OAAOG","file":"component---src-pages-projects-js-3badf99f5f1fc9d2a67d.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport SEO from '../components/seo.js'\nimport Header from '../components/gradient-header.js'\nimport Divider from '../components/divider.js'\nimport Footer from '../components/footer.js'\n\nimport '../styles/pages.css'\n\nimport '../../node_modules/materialize-css/dist/css/materialize.min.css'\n\nfunction condense(text, length) {\n  if (text.length > length - 3) {\n    // If the string is too long, trim it and add ellipses at the end\n    return text.substring(0, length) + '...'; \n  }\n  else if (text.length < length) {\n    // HACKY: If the length of the text is too short, we pad it with invisible non-breaking spaces\n    // These spaces ensure that the card is padded vertically to the correct size\n    // Chances are descriptions are long enough but this is a fallback measure to keep card heights identical \n    let nbsp = \"\\xa0\".repeat(4);\n    let nbsp_scale = 1.7;\n    return text + ` ${nbsp}`.repeat((length - text.length) / nbsp.length * nbsp_scale);\n  }\n  else {\n    return text;\n  }\n}\n\nfunction gridify(elements) {\n  let num_columns = 3;\n  let rows = [];\n  for (let i = 0; i < elements.length; i += num_columns) {\n    rows.push(\n      <div className=\"row\">\n        {elements.slice(i, i + num_columns)}\n      </div>\n    );\n  }\n  return rows;\n}\n\nexport default ({data}) => {\n  const get_project_html = (value) => {\n    let description = condense(value.node.description, 500);\n    return (\n      <div key={`${value.node.name}`}>\n        <div className=\"col l4 sm12\">\n          <Img fluid={value.node.local_image.childImageSharp.fluid} className=\"tse-project-image\"></Img>\n          <p><b>{value.node.name}</b></p>\n          <p>{description}</p>\n        </div>\n      </div>\n    )\n  };\n  // Project information is stored in data.allTseProjects\n  // This is fetched using a GraphQL query that maps to the tritonse-source-firestore plugin\n  let ongoing_projects = data.allTseProjects.edges\n    .filter((value) => {\n      return value.node.ongoing\n    })\n    .map((value) => {\n      return get_project_html(value);      \n    }\n  );\n  let completed_projects = data.allTseProjects.edges\n    .filter((value) => {\n      return !value.node.ongoing\n    })\n    .map((value) => {\n      return get_project_html(value);      \n    }\n  );\n\n  return (<div>\n    <SEO title=\"Projects\"/>\n    <Header\n      title={\n        <span>Our <span className=\"amber-text\">Projects</span></span>\n      }\n      subtitle=\"At TSE, we believe in keeping our work open source because we value transparency and connectivity.\"\n      buttons={\n        <span>\n          <a className=\"waves-effect waves-light btn-large blue darken-4 tse-header-button\" href=\"https://github.com/tritonse\">\n            Visit Our GitHub\n            <i class=\"material-icons right\">code</i>\n          </a>\n        </span>\n      }\n      background='tse-header-hands'\n      ></Header>\n    <div className=\"container\">\n      <Divider title=\"What We've Been Up To\" subtitle=\"CURRENT PROJECTS\"></Divider>\n      {gridify(ongoing_projects)}\n    </div>\n    <div className=\"container\">\n      <Divider title=\"What We Were Up To\" subtitle=\"PAST PROJECTS\"></Divider>\n      {gridify(completed_projects)}\n    </div>\n    <Footer></Footer> \n  </div>)\n}\n\nexport const query = graphql`\n  query {\n    allTseProjects {\n      edges {\n        node {\n          name\n          description\n          ongoing\n          image\n          local_image {\n            ...FluidImage\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n\nimport '../styles/divider.css'\n\nimport '../../node_modules/materialize-css/dist/css/materialize.min.css'\n\nconst Divider = ({title, subtitle, textColor, lineColor}) => (\n  <div className=\"center tse-divider\">\n    <p className={`${textColor}`}>{subtitle}</p>\n    <h3 className={`${textColor}`}>{title}</h3>\n    <hr className={`tse-divider-line ${lineColor ? lineColor : 'tse-divider-line-amber'}`}/>\n  </div>\n)\n\nexport default Divider;\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n"],"sourceRoot":""}